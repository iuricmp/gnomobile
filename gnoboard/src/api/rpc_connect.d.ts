// @generated by protoc-gen-connect-es v1.1.2
// @generated from file rpc.proto (package land.gno.gnomobile.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { CallRequest, CallResponse, DeleteAccountRequest, DeleteAccountResponse, GenerateRecoveryPhraseRequest, GenerateRecoveryPhraseResponse, QueryRequest, QueryResponse, SetChainIDRequest, SetChainIDResponse, SetPasswordRequest, SetPasswordResponse, SetRemoteRequest, SetRemoteResponse } from "./gnomobiletypes_pb.js";
import { MethodKind } from "@bufbuild/protobuf";
import { CreateAccountRequest, CreateAccountResponse, GetActiveAccountRequest, GetActiveAccountResponse, HelloRequest, HelloResponse, ListKeyInfoRequest, ListKeyInfoResponse, SelectAccountRequest, SelectAccountResponse } from "./rpc_pb.js";

/**
 * GnomobileService is the service to interact with the Gno blockchain
 *
 * @generated from service land.gno.gnomobile.v1.GnomobileService
 */
export declare const GnomobileService: {
  readonly typeName: "land.gno.gnomobile.v1.GnomobileService",
  readonly methods: {
    /**
     * Set the connection addresse for the remote node. If you don't call this,
     * the default is "127.0.0.1:26657"
     *
     * @generated from rpc land.gno.gnomobile.v1.GnomobileService.SetRemote
     */
    readonly setRemote: {
      readonly name: "SetRemote",
      readonly I: typeof SetRemoteRequest,
      readonly O: typeof SetRemoteResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Set the chain ID for the remote node. If you don't call this, the default
     * is "dev"
     *
     * @generated from rpc land.gno.gnomobile.v1.GnomobileService.SetChainID
     */
    readonly setChainID: {
      readonly name: "SetChainID",
      readonly I: typeof SetChainIDRequest,
      readonly O: typeof SetChainIDResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Set the password for the account in the keybase, used for later operations
     *
     * @generated from rpc land.gno.gnomobile.v1.GnomobileService.SetPassword
     */
    readonly setPassword: {
      readonly name: "SetPassword",
      readonly I: typeof SetPasswordRequest,
      readonly O: typeof SetPasswordResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Generate a recovery phrase of BIP39 mnemonic words using entropy from the
     * crypto library random number generator. This can be used as the mnemonic in
     * CreateAccount.
     *
     * @generated from rpc land.gno.gnomobile.v1.GnomobileService.GenerateRecoveryPhrase
     */
    readonly generateRecoveryPhrase: {
      readonly name: "GenerateRecoveryPhrase",
      readonly I: typeof GenerateRecoveryPhraseRequest,
      readonly O: typeof GenerateRecoveryPhraseResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Get the keys informations in the keybase
     *
     * @generated from rpc land.gno.gnomobile.v1.GnomobileService.ListKeyInfo
     */
    readonly listKeyInfo: {
      readonly name: "ListKeyInfo",
      readonly I: typeof ListKeyInfoRequest,
      readonly O: typeof ListKeyInfoResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Create a new account the keybase using the name an password specified by
     * SetAccount
     *
     * @generated from rpc land.gno.gnomobile.v1.GnomobileService.CreateAccount
     */
    readonly createAccount: {
      readonly name: "CreateAccount",
      readonly I: typeof CreateAccountRequest,
      readonly O: typeof CreateAccountResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * SelectAccount selects the active account to use for later operations
     *
     * @generated from rpc land.gno.gnomobile.v1.GnomobileService.SelectAccount
     */
    readonly selectAccount: {
      readonly name: "SelectAccount",
      readonly I: typeof SelectAccountRequest,
      readonly O: typeof SelectAccountResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * GetActiveAccount gets the active account which was set by SelectAccount.
     * If there is no active account, then return ErrNoActiveAccount.
     * (To check if there is an active account, use ListKeyInfo and check the
     * length of the result.)
     *
     * @generated from rpc land.gno.gnomobile.v1.GnomobileService.GetActiveAccount
     */
    readonly getActiveAccount: {
      readonly name: "GetActiveAccount",
      readonly I: typeof GetActiveAccountRequest,
      readonly O: typeof GetActiveAccountResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * DeleteAccount deletes the account with the given name, using the password to
     * ensure access. If the account doesn't exist, then return ErrCryptoKeyNotFound.
     *
     * @generated from rpc land.gno.gnomobile.v1.GnomobileService.DeleteAccount
     */
    readonly deleteAccount: {
      readonly name: "DeleteAccount",
      readonly I: typeof DeleteAccountRequest,
      readonly O: typeof DeleteAccountResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Make an ABCI query to the remote node.
     *
     * @generated from rpc land.gno.gnomobile.v1.GnomobileService.Query
     */
    readonly query: {
      readonly name: "Query",
      readonly I: typeof QueryRequest,
      readonly O: typeof QueryResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Call a specific realm function.
     *
     * @generated from rpc land.gno.gnomobile.v1.GnomobileService.Call
     */
    readonly call: {
      readonly name: "Call",
      readonly I: typeof CallRequest,
      readonly O: typeof CallResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Hello is for debug purposes
     *
     * @generated from rpc land.gno.gnomobile.v1.GnomobileService.Hello
     */
    readonly hello: {
      readonly name: "Hello",
      readonly I: typeof HelloRequest,
      readonly O: typeof HelloResponse,
      readonly kind: MethodKind.Unary,
    },
  }
};

