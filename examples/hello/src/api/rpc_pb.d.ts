// @generated by protoc-gen-es v1.4.2
// @generated from file rpc.proto (package land.gno.gnomobile.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * The ErrCode enum defines errors for gRPC API functions. These are converted
 * from the Go error types returned by gnoclient.
 *
 * ----------------
 * Special errors
 * ----------------
 *
 * @generated from enum land.gno.gnomobile.v1.ErrCode
 */
export declare enum ErrCode {
  /**
   * Undefined is the default value. It should never be set manually
   *
   * @generated from enum value: Undefined = 0;
   */
  Undefined = 0,

  /**
   * TODO indicates that you plan to create an error later
   *
   * @generated from enum value: TODO = 1;
   */
  TODO = 1,

  /**
   * ErrNotImplemented indicates that a method is not implemented yet
   *
   * @generated from enum value: ErrNotImplemented = 2;
   */
  ErrNotImplemented = 2,

  /**
   * ErrInternal indicates an unknown error (without Code), i.e. in gRPC
   *
   * @generated from enum value: ErrInternal = 3;
   */
  ErrInternal = 3,

  /**
   * @generated from enum value: ErrInvalidInput = 100;
   */
  ErrInvalidInput = 100,

  /**
   * @generated from enum value: ErrBridgeInterrupted = 101;
   */
  ErrBridgeInterrupted = 101,

  /**
   * @generated from enum value: ErrMissingInput = 102;
   */
  ErrMissingInput = 102,

  /**
   * @generated from enum value: ErrSerialization = 103;
   */
  ErrSerialization = 103,

  /**
   * @generated from enum value: ErrDeserialization = 104;
   */
  ErrDeserialization = 104,

  /**
   * @generated from enum value: ErrCryptoKeyTypeUnknown = 105;
   */
  ErrCryptoKeyTypeUnknown = 105,

  /**
   * ErrCryptoKeyNotFound indicates that the doesn't exist in the keybase
   *
   * @generated from enum value: ErrCryptoKeyNotFound = 106;
   */
  ErrCryptoKeyNotFound = 106,

  /**
   * ErrNoActiveAccount indicates that no active account has been set with SelectAccount
   *
   * @generated from enum value: ErrNoActiveAccount = 107;
   */
  ErrNoActiveAccount = 107,

  /**
   * @generated from enum value: ErrRunGRPCServer = 108;
   */
  ErrRunGRPCServer = 108,

  /**
   * ErrDecryptionFailed indicates a decryption failure including a wrong password
   *
   * @generated from enum value: ErrDecryptionFailed = 109;
   */
  ErrDecryptionFailed = 109,

  /**
   * @generated from enum value: ErrTxDecode = 110;
   */
  ErrTxDecode = 110,

  /**
   * @generated from enum value: ErrInvalidSequence = 111;
   */
  ErrInvalidSequence = 111,

  /**
   * @generated from enum value: ErrUnauthorized = 112;
   */
  ErrUnauthorized = 112,

  /**
   * ErrInsufficientFunds indicates that there are insufficient funds to pay for fees
   *
   * @generated from enum value: ErrInsufficientFunds = 113;
   */
  ErrInsufficientFunds = 113,

  /**
   * ErrUnknownRequest indicates that the path of a realm function call is unrecognized
   *
   * @generated from enum value: ErrUnknownRequest = 114;
   */
  ErrUnknownRequest = 114,

  /**
   * ErrInvalidAddress indicates that an account address is blank or the bech32 can't be decoded
   *
   * @generated from enum value: ErrInvalidAddress = 115;
   */
  ErrInvalidAddress = 115,

  /**
   * ErrUnknownAddress indicates that the address is unknown on the blockchain
   *
   * @generated from enum value: ErrUnknownAddress = 116;
   */
  ErrUnknownAddress = 116,

  /**
   * ErrInvalidPubKey indicates that the public key was not found or has an invalid algorithm or format
   *
   * @generated from enum value: ErrInvalidPubKey = 117;
   */
  ErrInvalidPubKey = 117,

  /**
   * ErrInsufficientCoins indicates that the transaction has insufficient account funds to send
   *
   * @generated from enum value: ErrInsufficientCoins = 118;
   */
  ErrInsufficientCoins = 118,

  /**
   * ErrInvalidCoins indicates that the transaction Coins are not sorted, or don't have a
   * positive amount, or the coin Denom contains upper case characters
   *
   * @generated from enum value: ErrInvalidCoins = 119;
   */
  ErrInvalidCoins = 119,

  /**
   * ErrInvalidGasWanted indicates that the transaction gas wanted is too large or otherwise invalid
   *
   * @generated from enum value: ErrInvalidGasWanted = 120;
   */
  ErrInvalidGasWanted = 120,

  /**
   * ErrOutOfGas indicates that the transaction doesn't have enough gas
   *
   * @generated from enum value: ErrOutOfGas = 121;
   */
  ErrOutOfGas = 121,

  /**
   * ErrMemoTooLarge indicates that the transaction memo is too large
   *
   * @generated from enum value: ErrMemoTooLarge = 122;
   */
  ErrMemoTooLarge = 122,

  /**
   * ErrInsufficientFee indicates that the gas fee is insufficient
   *
   * @generated from enum value: ErrInsufficientFee = 123;
   */
  ErrInsufficientFee = 123,

  /**
   * ErrTooManySignatures indicates that the transaction has too many signatures
   *
   * @generated from enum value: ErrTooManySignatures = 124;
   */
  ErrTooManySignatures = 124,

  /**
   * ErrNoSignatures indicates that the transaction has no signatures
   *
   * @generated from enum value: ErrNoSignatures = 125;
   */
  ErrNoSignatures = 125,

  /**
   * ErrGasOverflow that an action results in a gas consumption unsigned integer overflow
   *
   * @generated from enum value: ErrGasOverflow = 126;
   */
  ErrGasOverflow = 126,
}

/**
 * @generated from message land.gno.gnomobile.v1.ErrDetails
 */
export declare class ErrDetails extends Message<ErrDetails> {
  /**
   * @generated from field: repeated land.gno.gnomobile.v1.ErrCode codes = 1;
   */
  codes: ErrCode[];

  constructor(data?: PartialMessage<ErrDetails>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "land.gno.gnomobile.v1.ErrDetails";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ErrDetails;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ErrDetails;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ErrDetails;

  static equals(a: ErrDetails | PlainMessage<ErrDetails> | undefined, b: ErrDetails | PlainMessage<ErrDetails> | undefined): boolean;
}

